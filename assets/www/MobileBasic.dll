/*
 * ================================//
 * Интерпретатор языка JsMobileBasic
 * ~~~~~~~~~~by PROPHESSOR~~~~~~~~~~
 * ================================//
*/

var $JsMobileBasic = {
    name: 'JsMobileBasic',
    version: 'Alpha 6',
    author: 'PROPHESSOR',
    url: 'http://PROPHESSOR.16mb.com/projects/JsMobileBasic'
}

var $Init = {
        File: [function(){
            if(!$Init.File[1]){
                try{
                    $File = require('fs');
                    $Init.File[1] = true;
                }catch(err){
                    debug('Для работы с файлами требуется выполнить ПОЛНУЮ компиляцию проекта!');
                    debug('{ Ошибка: '+err+' };');
                    $Init.File[2] = true;
                }
            }else{
                debug('Модуль File уже инициализирован!', 'background:black;color:#00ff00;');
            }
        }, false],
        OS: [function(){
            if(!$Init.OS[1]){
                try{
                    $OS = require('os');
                    $Init.OS[1] = true;
                }catch(err){
                    debug('Для работы с данными операционной системы требуется выполнить ПОЛНУЮ компиляцию проекта!');
                    debug('{ Ошибка: '+err+' };');
                    $Init.OS[2] = true;
                }
            }else{
                debug('Модуль OS уже инициализирован!', 'background:black;color:#00ff00;');
            }
    }, false],
        NW: [function(){
            if(!$Init.NW[1]){
                try{
                    $NW = require('nw.gui');
                    $Init.NW[1] = true;
                }catch(err){
                    debug('Для работы с GUI требуется выполнить ПОЛНУЮ компиляцию проекта!');
                    debug('{ Ошибка: '+err+' };');
                    $Init.NW[2] = true;
                }
            }else{
                debug('Модуль NW уже инициализирован!', 'background:black;color:#00ff00;');
            }
        }, false, false],
    Path: [function(){
            if(!$Init.Path[1]){
                try{
                    $Path = require('path');
                    $Init.Path[1] = true;
                }catch(err){
                    debug('Для работы с путями требуется выполнить ПОЛНУЮ компиляцию проекта!');
                    debug('{ Ошибка: '+err+' };');
                    $Init.Path[2] = true;
                }
            }else{
                debug('Модуль NW уже инициализирован!', 'background:black;color:#00ff00;');
            }
        }, false, false]
}

debug('#===== Включён режим отладки =====#','color:gray;');
debug($JsMobileBasic.name,'background:gray;color:yellow;');
debug($JsMobileBasic.version,'background:gray;color:yellow;');
debug($JsMobileBasic.author,'background:gray;color:yellow;');
debug($JsMobileBasic.url,'background:gray;color:yellow;');

// ======Инициализация рабочей среды======//
debug('// ======Инициализация рабочей среды======//', 'color:gray;');
// Чтение конфига
if($Config == undefined){
    console.error('Не найдена конфигурация в файле index.html!');
}

if($Config.type == 'canvas'){
    debug('Используется canvas!','background:black;color:yellow;');
    var c = document.getElementById("c");
    var ctx = c.getContext("2d");
    if($Config.canvas_size[0] == '*' && $Config.canvas_size[1] == '*'){
        debug('Canvas растянут на весь экран', 'background:black;color:#00ff00;');
        $Config.canvas_size[2] ? debug('Вмещение включено') : debug('Вмещение выключено');
        c.height = window.innerHeight;
        c.width = window.innerWidth;
        if($Config.canvas_size[2]){
            c.style = 'display:block; width:100%; height:100%;';
        }
    }else{
        debug($Config.canvas_size);
        c.height = $Config.canvas_size[1];
        c.width = $Config.canvas_size[0];      
    }
}else{
    debug('Canvas не используется!','background:black;color:yellow;');
    var c = window;
    var ctx = false;
    if(document.getElementById('c') != undefined)    document.body.removeChild(document.getElementById('c'));
}

document.getElementsByTagName('title')[0].innerHTML = $Config.name;
debug('Имя проекта: '+$Config.name,'background:brown;color:yellow;');

var player = document.getElementById("player");
// ======Инициализация интерпретатора======//
debug('// ======Инициализация интерпретатора======//', 'color:gray;');

//var MobileBasic = {};

//Глобальные переменные

var $fontSize = 10,
    $NW,
    $Files,
    $OS,
    $Path;

//Контейнеры
var $Mouse = {
    x: 0,
    y: 0,
    lcount: 0,
    rcount: 0
};
var $Gel = {};
var $Font = {
    family: 'arial',
    size: '10'
};
var $Element = {};
var $Menu = {
    $Bar: {}
};

//Константы

const PI = Math.PI;
const G = 9.8;
const RAD2DEG = 180/PI;
const DEG2RAD = PI/180;

//Графика

function setColor(color){
    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    return true;
};
function setLineWidth(width){
    ctx.lineWidth = width;
    return true;
}
function fillRect(x, y, x1, y1){
    ctx.fillRect(x, y, x1, y1);
    return true;
}
function cls(){
    clearRect(0,0,screenWidth(),screenHeight());
    document.getElementById('p').innerHTML = '';
    return true;
}
function fillScreen(color){
    setColor(color);
    fillRect(0,0,screenWidth(),screenHeight());
    return true;
}
function drawRect(x, y, x1, y1){
    ctx.strokeRect(x, y, x1, y1);
    return true;
}
function drawPlot(x,y){
    setLineWidth(1);
    drawLine(x,y,x+1,y+1);
    return true;
}
function clearRect(x, y, x1, y1){
    ctx.clearRect(x, y, x1, y1);
    return true;
}
function drawLine(x, y, x1, y1){
    ctx.beginPath();
    ctx.moveTo(x,y);
    ctx.lineTo(x1,y1)
    ctx.stroke();
    return true;
}
function drawCube(x, y, x1, y1, q){
    ctx.strokeRect(x, y, x1, y1);
    ctx.strokeRect(x+(q/Math.sqrt(2)), y+(q/Math.sqrt(2)), x1, y1);
    drawLine(x, y, x+(q/Math.sqrt(2)), y+(q/Math.sqrt(2)));
    drawLine(x+x1, y, x+x1+(q/Math.sqrt(2)), y+(q/Math.sqrt(2)));
    drawLine(x, y+y1, x+(q/Math.sqrt(2)), y+y1+(q/Math.sqrt(2)));
    drawLine(x+x1, y+y1, x+x1+(q/Math.sqrt(2)), y+y1+(q/Math.sqrt(2)));
    return true;
}
function drawArc(x,y,radius,startAngle, endAngle, counterClockwise){
    if(startAngle == undefined){startAngle = 15*Math.PI/7;}
    
    if(endAngle == undefined){endAngle = 13*Math.PI/2;}
    if(counterClockwise == undefined){counterClockwise = false;}//направление дуги. По умолчанию false

    ctx.beginPath();
    ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
    ctx.stroke();
    return true;
}
function fillArc(x,y,radius,startAngle, endAngle, counterClockwise){
    if(startAngle == undefined){startAngle = 15*Math.PI/7;}
    if(endAngle == undefined){endAngle = 13*Math.PI/2;}
    if(counterClockwise == undefined){counterClockwise = false;}

    ctx.beginPath();
    ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
    ctx.fill();
    return true;
}
function fillRect4(x,y,x1,y1,x2,y2,x3,y3){
    var arr = [[x,y],[x1,y1],[x2,y2],[x3,y3]];
   ctx.beginPath(); 
   for (var i = 0; i < arr.length; i++) { 
      if (i == 0) ctx.moveTo(arr[i][0], arr[i][1]); 
      else ctx.lineTo(arr[i][0], arr[i][1]); 
   } 
   ctx.fill(); 
    return true;
} 
function drawRect4(x,y,x1,y1,x2,y2,x3,y3){
    var arr = [[x,y],[x1,y1],[x2,y2],[x3,y3]];
   ctx.beginPath(); 
   for (var i = 0; i < arr.length; i++) { 
      if (i == 0) ctx.moveTo(arr[i][0], arr[i][1]); 
      else ctx.lineTo(arr[i][0], arr[i][1]); 
   } 
   ctx.stroke(); 
    return true;
}
function fillTriangle(x,y,x1,y1,x2,y2){
    var arr = [[x,y],[x1,y1],[x2,y2]];
   ctx.beginPath(); 
   for (var i = 0; i < arr.length; i++) { 
      if (i == 0) ctx.moveTo(arr[i][0], arr[i][1]); 
      else ctx.lineTo(arr[i][0], arr[i][1]); 
   } 
   ctx.fill();
    return true;
} 
function drawTriangle(x,y,x1,y1,x2,y2){
    var arr = [[x,y],[x1,y1],[x2,y2]];
   ctx.beginPath(); 
   for (var i = 0; i < arr.length; i++) { 
      if (i == 0) ctx.moveTo(arr[i][0], arr[i][1]); 
      else ctx.lineTo(arr[i][0], arr[i][1]); 
   } 
   ctx.stroke();
    return true;
} 
function drawString(text, x, y){
    ctx.fillText(text, x, y);
    return true;
};
function setFontSize(size){
    ctx.font = size + "px" + $Font.family;
    return true;
}
function setFont(family){
    ctx.font = $Font.size + "px" + family;
    return true;
}

function makeLinearGradient(x,y,x1,y1){
    return ctx.createLinearGradient(x, y, x1, y1);
}
function makeRadialGradient(x,y,r,x1,y1,r1){
    return ctx.createRadialGradient(x, y, r, x1, y1, r1);
}
function setGradientColor(g,num,color){
    g.addColorStop(num,color);
    return true;
}

//Гели/спрайты

function gelLoad(file, name){
    eval('$Gel.'+name+' = new Image(); $Gel.'+name+'.src = "'+file+'";');
    return true;
}
function spriteLoad(file, name){
    eval('$Gel.'+name+' = new Sprite(); $Gel.'+name+'.src = "'+file+'";');
    debug('Внимание! Функция spriteLoad работает некорректно! Обновитесь до последней версии!');
    return false;
//    var c = new Sprite();
    
}
function drawGel(name, x, y){
    eval('ctx.drawImage($Gel.'+name+', '+x+', '+y+');');
    return true;
}
function drawSprite(name, x, y){
    eval('ctx.drawImage($Gel.'+name+', '+x+', '+y+');');
    return true;
}


//Ввод

function input(text){
    return prompt(text);
}


//Вывод


function println(text){
//    var e = document.createElement("p");
//    e.style = "color:black;";
    var p = document.getElementById('p');
    p.style = "position:fixed;top:0px;left:0px;width:100%;height:100%;";
    p.innerHTML += text + "<br/>";
//    document.getElementById('p').appendChild(e);
    return true;
}

//Звук

function playSound(file, loop){
    player.src = file;
    if(loop == 0 || !loop){
        player.setAttribute('loop', '0');
        player.play();
    }else{
        player.setAttribute('loop', '1');
        player.play();
    }
   return true;
}
function pauseSound(){
    player.pause();
    return true;
};

//Matheматика

function sqrt(x){
    return Math.sqrt(x);
}
function random(a,b){
    return Math.floor(Math.random()*b+a);
}
function sin(x){
    return Math.sin(x);
}
function cos(x){
    return Math.cos(x);
}
function tan(x){
    return Math.tan(x);
}
function ctg(x){
    return 1/Math.tan;
}
function asin(x){
    return Math.asin(x);
}
function acos(x){
    return Math.acos(x);
}
function atan(x){
    return Math.atan(x);
}
function mod(x, y){
    return x%y;
}
function abs(x){
    return Math.abs(x);
}
function pow(x, num){
    return Math.pow(x, num);
}
function log(x){
    return Math.log(x);
}
function exp(x){
    return Math.exp(x);
}

//Строковые функции
function len(str){
    return str.length;
}
function str(num){
    return num.toString;
}
function val(str){
    return parseInt(str);
}
function upper(str){
    return str.toUpperCase;
}
function lower(str){
    return str.toLowerCase;
}
function mid(str,pos,len){
    return str.substr(pos,len);
}
function chr(code){
    return code.charAt;
}
function asc(str){
    return str.charCodeAt;
}

//Работа с файлами



function saveData(filename, data, callback) {
    $Init.File[0]();
    $Init.NW[0]();
    $Init.Path[0]();
    
    var file = filename+'.json';
    var filePath = $Path.join($NW.App.dataPath, file);
    data = toJSON(data);
    
    $File.writeFile(filePath, data, function (err) {
        if (err) {
            alert('Ошибка при сохранении: '+err.message);
            return false;
        } else if (callback) {
            callback();
        }
    });
}

function readData(filename){
    $Init.File[0]();
    $Init.NW[0]();
    $Init.Path[0]();
    
    var file = filename+'.json';
    var filePath = $Path.join($NW.App.dataPath, file);
    var data = $File.readFileSync(filePath,'utf8');
    var json = parseJSON(data);
    debug({data: data, json: json});
    return json;
//    console.warn('Данный оператор ещё не реализован!');
}

function parseJSON(json){
    return JSON.parse(json);
}

function toJSON(object){
    return JSON.stringify(object, "", 4);
}

//OS


//Работа с NW

//Контекстное меню
function menuAdd(name, title, onClick, type, fortype){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        if($Menu[name] == undefined){
            $Menu[name] = new $NW.Menu();
        }
        switch(type){
            case undefined:
                $Menu[name].append(new $NW.MenuItem({
                    label: title,
                    click: onClick
                }));
            break;
            case 'subMenu':
                $Menu[name].append(new $NW.MenuItem({
                    label: title,
                    submenu: fortype
                }));
            break;
            case 'checkbox':
                $Menu[name].append(new $NW.MenuItem({
                    label: title,
                    type: 'checkbox',
                    click: onClick
                }));
            break;
        }
        return true;
    }else{
        debug('Создание меню невозможно!');
        return false;
    }
}

function menuShow(name, x, y){
    if(!$Init.NW[2]){
        $Menu[name].popup(x, y);
        return true;
    }else{
        debug('Отображение меню невозможно!');
        return false;
    }
}

function menuAddSeparator(name){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        if($Menu[name] == undefined){
            $Menu[name] = new $NW.Menu();
        }
        $Menu[name].append(new $NW.MenuItem({
            type: 'separator' 
        }));
        return true;
    }else{
        debug('Создание меню невозможно!');
        return false;
    }
}

//Menu bar

function menuBarAdd(name, title, subMenu){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        if($Menu.$Bar[name] == undefined){
            $Menu.$Bar[name] = new $NW.Menu({ type: 'menubar', title: title});
        }
        $Menu.$Bar[name].append(new $NW.MenuItem({ label: title, submenu: $Menu[subMenu]}));
        return true;
    }else{
        debug('Создание меню невозможно!');
        return false;
    }
}

function menuBarShow(name){
    if(!$Init.NW[2]){
        $NW.Window.get().menu = $Menu.$Bar[name];
        return true;
    }else{
        debug('Отображение меню невозможно!');
        return false;
    }
}


//clipboard

function getClipboard(type){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        var clipboard = $NW.Clipboard.get();
        type == undefined ? type = 'text' : null;
        return clipboard.get(type);
    }else{
        debug('Работа с буфером обмена невозможна!');
        return false;
    }
}

function setClipboard(value, type){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        var clipboard = $NW.Clipboard.get();
        type == undefined ? type = 'text' : null;
        clipboard.set(value, type);
        return true;
    }else{
        debug('Работа с буфером обмена невозможна!');
        return false;
    }
}

function clearClipboard(){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        var clipboard = $NW.Clipboard.get();
        clipboard.clear();
        return true;
    }else{
        debug('Работа с буфером обмена невозможна!');
        return false;
    }
}

//tray

function menuTrayAdd(name, title, icon, menu){
    $Init.NW[0]();
    if(!$Init.NW[2]){
        var tray = new $NW.Tray({ 
            title: title, 
            icon: icon,  
            alticon: icon
        }); 
        tray.menu = $Menu[menu];  
        return true;
    }else{
        debug('Работа с треем невозможна!');
        return false;
    }
}

//Работа с модулями
function include(file){
    var e = document.createElement("script");
    e.src = file;
    e.type="text/javascript";
    document.getElementById('modules').appendChild(e);
    return true;
}

function getModuleName(ID){
    eval('return '+ID+'.name');
}
function getModuleAuthor(ID){
    eval('return '+ID+'.author');
}
function getModuleDescription(ID){
    eval('return '+ID+'.description');
}
function getModuleUrl(ID){
    eval('return '+ID+'.url');
}
function getModuleVersion(ID){
    eval('return '+ID+'.version');
}

//Получение значений

function screenWidth(){
    return window.innerWidth;
}
function screenHeight(){
    return window.innerHeight;
}
function getMouseX(){
    return $Mouse.x;
}
function getMouseY(){
    return $Mouse.y;
}
function getLeftClicksCount(){
    return $Mouse.lcount;
}
function getRightClicksCount(){
    return $Mouse.rcount;
}


//Техническое

function log(text){
    console.log(text);
    return true;
}

function debug(text, style){
    if($Config.Debug_Mode){
        (style == undefined) ? style = 'background: black; color: red;' : null;
        console.log('%c '+text, style);
    }
}

function exit(){
    window.close();
    return true;
}

//HTML5 функции
function addInputForm(id, value, x, y){
    var e = document.createElement('input');
    e.type = 'text';
    e.setAttribute('id', id);
    e.value = value;
    document.getElementsByTagName("body")[0].appendChild(e);
        e.style = "position: absolute; left:"+x+"px; top:"+y+"px;";
    return true;
}
function addInputPassForm(id, value, x, y){
    var e = document.createElement('input');
    e.type = 'password';
    e.setAttribute('id', id);
    e.value = value;
    document.getElementsByTagName("body")[0].appendChild(e);
        e.style = "position: absolute; left:"+x+"px; top:"+y+"px;";
    return true;
}
function addInputRadioForm(id, value, x, y){
    var e = document.createElement('input');
    e.type = 'radio';
    e.setAttribute('id', id);
    document.getElementsByTagName("body")[0].appendChild(e);
        e.style = "position: absolute; left:"+x+"px; top:"+y+"px;";
    return true;
}

function add(code){
    var e = document.createElement("div");
    e.innerHTML = code;
    document.getElementsByTagName("body")[0].appendChild(e);
    return true;
}//Добавление элементов в реальном времени
//function addElement(type, code, to){
//    var e = document.createElement(type);
//    e.innerHTML = code;
//    document.getElementById(to).appendChild(e);
//    return true;
//}//Добавление элементов в реальном времени
function addElement(name, type){
    eval("var $Element."+name+" = document.createElement("+type+");");
    eval("document.getElementById('includeHTML').appendChild("+name+");");
    return $Element.name;
}

//Обработчики событий

c.addEventListener('mousemove', function(event){
    $Mouse.x=event.offsetX;
    $Mouse.y=event.offsetY;
    onMouseMove(event.offsetX, event.offsetY);
//    if($listener != undefined){
//        eval($listener.mousemove + '=onMouseMove;');
//    }
}, false);
c.addEventListener('click', function(event){
    $Mouse.lcount++;
    onClick(event.offsetX, event.offsetY);
//    if($listener != undefined){
//        eval($listener.click + '=onClick;');
//    }
}, false);
c.addEventListener('mousedown', function(event){
    onMouseDown(event.offsetX, event.offsetY);
//    if($listener != undefined){
//        eval($listener.mousedown + '=onMouseDown;');
//    }
}, false);
c.addEventListener('mouseup', function(event){
    onMouseUp(event.offsetX, event.offsetY);
//    if($listener != undefined){
//        eval($listener.mouseup + '=onMouseUp;');
//    }
}, false);
c.addEventListener('contextmenu', function(event){
    $Mouse.rcount++;
    onRightClick(event.offsetX, event.offsetY);
//    if($listener != undefined){
//        eval($listener.rclick + '=onRightClick;');
//    }
}, false);
window.addEventListener('keypress', function(event){
    onKeyPress(event.charCode);
}, false);

// ======Прочее======//
//Блокировка контекстного меню при правом клике

function clickIE4(){
    if (event.button==2){
        alert(message);
        return false;
    }
};
function clickNS4(e){
    if (document.layers||document.getElementById&&!document.all){
        if (e.which==2||e.which==3){
            alert(message);
            return false;
        }
    }
}
if (document.layers){
    с.captureEvents(Event.MOUSEDOWN);
    с.onmousedown=clickNS4;
}
    else if(document.all&&!document.getElementById){
    с.onmousedown=clickIE4;
};
document.oncontextmenu=new Function("return false");

debug('// ======Инициализация завершена======//','background:black;color: #00ff00;');

onload = function(){
    Main();
    setInterval(Loop(), 10);
}

debug('// ======Подключение модулей/библиотек======//', 'color:gray;');